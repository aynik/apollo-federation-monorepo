
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

input CreateProductInput {
  sku: String
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input GetTokenInput {
  email: String!
  password: String!
}

type JWT {
  refreshToken: String!
  token: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User! @join__field(graph: USERS)
  getToken(input: GetTokenInput): JWT @join__field(graph: USERS)
}

type Product
  @join__owner(graph: PRODUCTS)
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: USERS, key: "id")
{
  createdBy: User @join__field(graph: USERS)
  id: ID! @join__field(graph: PRODUCTS)
  sku: String @join__field(graph: PRODUCTS)
  variants: [ProductVariant] @join__field(graph: PRODUCTS)
}

type ProductVariant
  @join__owner(graph: PRODUCTS)
  @join__type(graph: PRODUCTS, key: "id")
{
  id: ID! @join__field(graph: PRODUCTS)
  name: String @join__field(graph: PRODUCTS)
}

type Query {
  allProducts: [Product] @join__field(graph: PRODUCTS)
  createProduct(input: CreateProductInput!): Product @join__field(graph: PRODUCTS)
  me: User @join__field(graph: USERS)
  myProducts: [Product] @join__field(graph: PRODUCTS)
  product(id: ID!): Product @join__field(graph: PRODUCTS)
}

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
{
  createProduct(input: CreateProductInput!): Product! @join__field(graph: PRODUCTS)
  email: String @join__field(graph: USERS)
  id: ID! @join__field(graph: USERS)
  name: String @join__field(graph: USERS)
  productsCreated: [Product] @join__field(graph: PRODUCTS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  PRODUCTS @join__graph(name: "products" url: "http://products:4000/graphql")
  USERS @join__graph(name: "users" url: "http://users:4000/graphql")
}
